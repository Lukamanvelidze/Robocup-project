import qi
import sys
import time
import wave
import tempfile
import platform
import winsound  # Windows only; for playback

class NAOSoundRecorder:
    def __init__(self, app):
        app.start()
        self.session = app.session
        self.audio_service = self.session.service("ALAudioDevice")
        self.module_name = "NAOSoundRecorder"

        self.audio_rate = 16000
        self.frames_to_collect = 200  # Number of frames to collect (~1.25s)
        self.frames_collected = 0
        self.collected_samples = []

        # Register this instance as a service with NAOqi so callbacks are received
        self.session.registerService(self.module_name, self)

    def start(self):
        # Set client preferences: 1 channel, 16-bit, 16000Hz
        self.audio_service.setClientPreferences(self.module_name, self.audio_rate, 1, 0)
        self.audio_service.subscribe(self.module_name)

        print("Subscribed, recording audio...")

        while self.frames_collected < self.frames_to_collect:
            time.sleep(0.1)

        self.audio_service.unsubscribe(self.module_name)
        print("Unsubscribed, saving audio...")

        wav_path = self.save_wav()
        self.play_wav(wav_path)

    def processRemote(self, nbOfChannels, nbOfSamplesByChannel, timeStamp, inputBuffer):
        print(f"Received audio frame {self.frames_collected + 1}")
        if self.frames_collected < self.frames_to_collect:
            self.frames_collected += 1
            # inputBuffer is raw bytes of PCM samples
            self.collected_samples.append(inputBuffer)

    def save_wav(self):
        tmp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".wav")
        with wave.open(tmp_file.name, 'wb') as wf:
            wf.setnchannels(1)             # Mono audio
            wf.setsampwidth(2)             # 16-bit samples
            wf.setframerate(self.audio_rate)
            wf.writeframes(b''.join(self.collected_samples))
        print(f"Audio saved to {tmp_file.name}")
        return tmp_file.name

    def play_wav(self, path):
        if platform.system() == "Windows":
            print("Playing audio via winsound...")
            winsound.PlaySound(path, winsound.SND_FILENAME)
        else:
            print("Audio playback not supported on this OS in this example.")

if __name__ == "__main__":
    ip = "127.0.0.1"   # Change to your NAO IP
    port = 9559

    try:
        app = qi.Application(["NAOSoundRecorder", f"--qi-url=tcp://{ip}:{port}"])
    except RuntimeError:
        print("Can't connect to NAOqi.")
        sys.exit(1)

    recorder = NAOSoundRecorder(app)
    recorder.start()
